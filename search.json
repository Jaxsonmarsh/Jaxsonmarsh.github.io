[
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Interesting Topical Analysis",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nDec 9, 2023\n\n\nJaxson Marsh\n\n\n1 min\n\n\n\n\n\n\n  \n\n\n\n\nSpotify\n\n\n\n\n\n\n\n\n\nDec 9, 2023\n\n\nJaxson Marsh\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nNYC Restaurant Inspection\n\n\n\n\n\n\n\n\n\nDec 9, 2023\n\n\nJaxson Marsh\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nNFL in 2022\n\n\n\n\n\n\n\n\n\nDec 9, 2023\n\n\nJaxson Marsh\n\n\n6 min\n\n\n\n\n\n\n  \n\n\n\n\nBeer Markets\n\n\n\n\n\n\n\n\n\nDec 9, 2023\n\n\nJaxson Marsh\n\n\n4 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Jaxson Marsh",
    "section": "",
    "text": "Jaxson Marsh is a student currentley enrolled in Introduction to Data Analytics at SUNY Geneseo, whilst majoring in Accounting."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Jaxson Marsh",
    "section": "Education",
    "text": "Education\nFinger Lakes Community College | Canandaigua, NY  A.S. in Healthcare Management | Aug 2021 - May 2023 \nState University of New York at Geneseo | Geneseo, NY  B.S. in Accounting | Aug 2023 - Current"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Jaxson Marsh",
    "section": "Experience",
    "text": "Experience\nUber Lawns & Landscape | Foreman | Aug 2021 - Aug 2023\nWegmans | Prepared Foods Handler | Mar 2021 - Dec 2021\nNYS Soccer Referee Association | Soccer Referee | July 2017 - Aug 2019"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html",
    "href": "posts/beer-markets/beer-markets.html",
    "title": "Beer Markets",
    "section": "",
    "text": "Let’s analyze the beer_data data:\nbeer_data &lt;- read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "href": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "title": "Beer Markets",
    "section": "Variable Description for beer_data data.frame",
    "text": "Variable Description for beer_data data.frame\nThe following describes the variables in the beer_data data.frame.\n\nhh: Household identifier\n_purchase_desc: Description of the purchase\nquantity: The quantity of beer purchased\nbrand: The brand of beer\ndollar_spent: The amount spent\nbeer_floz: Fluid ounces of beer\nprice_per_floz: Price per fluid ounce\ncontainer: Type of container\npromo: Whether the purchase was on promotion\nmarket: The market where the purchase was made\nDemographics: age, employment status, degree, class of worker (cow), race, and household information like microwave, dishwasher, tvcable, singlefamilyhome, and npeople (number of people in the household)"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "href": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "title": "Beer Markets",
    "section": "Purchase Patterns",
    "text": "Purchase Patterns\nWe’ll explore the purchase patterns in the dataset. This includes understanding the most popular brands, the average quantity purchased, and spending habits across different markets. Here are some specific analyses we can perform:\n\nCalculate the total quantity and spending for each brand.\nFind the average quantity purchased and average spending per purchase.\nCompare the total spending across different markets.\n\nI’ll begin with these analyses and create visualizations to help us understand the data better. Let’s start by calculating the total quantity and spending for each brand.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reading the CSV file\nbeer_data = pd.read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")\n\n# Setting up the visualisation settings\nsns.set(style=\"whitegrid\")\n\n# Calculate total quantity and spending for each brand\nbrand_summary = beer_data.groupby('brand').agg({'quantity':'sum', 'dollar_spent':'sum'}).reset_index()\n\n# Sort by total quantity and spending\nbrand_summary_sorted_quantity = brand_summary.sort_values('quantity', ascending=False)\nbrand_summary_sorted_spent = brand_summary.sort_values('dollar_spent', ascending=False)\n\n\n# Plotting total quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=brand_summary_sorted_quantity, palette='viridis')\nplt.title('Total Quantity of Beer Purchased by Brand')\nplt.xlabel('Total Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting total spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=brand_summary_sorted_spent, palette='viridis')\nplt.title('Total Spending on Beer by Brand')\nplt.xlabel('Total Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar charts above display the total quantity of beer purchased and the total spending by brand. From the looks of it, certain brands dominate in terms of quantity sold and total spending, indicating their popularity.\nNow, let’s calculate the average quantity purchased and average spending per purchase. For this, we’ll consider each row in the dataset as a separate purchase and compute the averages accordingly.\n\n# Calculate average quantity purchased and average spending per purchase\naverage_purchase = beer_data.groupby('brand').agg({\n    'quantity': 'mean', \n    'dollar_spent': 'mean'\n}).reset_index()\n\n# Sort by average quantity and average spending\naverage_purchase_sorted_quantity = average_purchase.sort_values('quantity', ascending=False)\naverage_purchase_sorted_spent = average_purchase.sort_values('dollar_spent', ascending=False)\n\n# Plotting average quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=average_purchase_sorted_quantity, palette='viridis')\nplt.title('Average Quantity of Beer Purchased by Brand')\nplt.xlabel('Average Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting average spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=average_purchase_sorted_spent, palette='viridis')\nplt.title('Average Spending on Beer by Brand')\nplt.xlabel('Average Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe visualizations above depict the average quantity of beer purchased per brand and the average spending per brand. This shows which brands tend to be bought in larger quantities on average and which brands tend to have higher spending per purchase, which could be indicative of their price point or the purchase of premium products.\nNext, we’ll look at the total spending across different markets to see if there are any notable differences in spending habits geographically. To do this, we’ll sum up the spending in each market and visualize it.\n\n# Calculate total spending in each market\nmarket_spending_summary = beer_data.groupby('market').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nmarket_spending_summary_sorted = market_spending_summary.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending in each market\nplt.figure(figsize=(12, 10))\nsns.barplot(x='dollar_spent', y='market', data=market_spending_summary_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Market')\nplt.xlabel('Total Spending')\nplt.ylabel('Market')\nplt.show()\n\n\n\n\nThe bar chart illustrates the total spending on beer by market, showcasing the differences in spending habits across various regions. Some markets have significantly higher spending, which could be due to a variety of factors including market size, consumer preferences, or economic factors.\nNow, let’s move on to the second analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "href": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "title": "Beer Markets",
    "section": "Demographic Analysis",
    "text": "Demographic Analysis\nWe will examine which demographics are buying what kind of beer and whether spending habits vary by demographics such as age, employment, and race. For this, we could look at:\n\nSpending by age group\nSpending by employment status\nSpending by race\n\nI’ll start by analyzing spending by age group.\n\n# Calculate total spending by age group\nage_group_spending = beer_data.groupby('age').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nage_group_spending_sorted = age_group_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by age group\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='age', data=age_group_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Age Group')\nplt.xlabel('Total Spending')\nplt.ylabel('Age Group')\nplt.show()\n\n\n\n\nThe bar chart demonstrates the total spending on beer segmented by age group, highlighting which age groups spend the most on beer. It appears that certain age groups are more dominant in beer spending, which may align with the purchasing power or preferences of those groups.\nNext, we will examine spending by employment status.\n\n# Calculate total spending by employment status\nemployment_spending = beer_data.groupby('employment').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nemployment_spending_sorted = employment_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by employment status\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='employment', data=employment_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Employment Status')\nplt.xlabel('Total Spending')\nplt.ylabel('Employment Status')\nplt.show()\n\n\n\n\nThe visualization shows the total spending on beer by employment status. We can see that certain employment groups, such as full-time workers, are spending more on beer, which might be related to their disposable income.\nFinally, let’s look at spending by race to complete the demographic analysis.\n\n# Calculate total spending by race\nrace_spending = beer_data.groupby('race').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nrace_spending_sorted = race_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by race\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='race', data=race_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Race')\nplt.xlabel('Total Spending')\nplt.ylabel('Race')\nplt.show()\n\n\n\n\nThe bar chart above indicates the total spending on beer broken down by race, highlighting which racial groups account for the most beer spending within the dataset. This could reflect both the demographics of the regions where the data was collected and cultural preferences regarding beer.\nNow, let’s proceed to the third analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "href": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "title": "Beer Markets",
    "section": "Price Sensitivity",
    "text": "Price Sensitivity\nWe’ll look at the price per fluid ounce and see if there are any trends or correlations with the quantity purchased or the brand popularity. To do this, we’ll calculate the average price per fluid ounce for each brand and then visualize how this relates to the average quantity purchased and the total quantity purchased by brand.\nFirst, let’s calculate the average price per fluid ounce for each brand.\n\n# Calculate average price per fluid ounce for each brand\nbrand_price_sensitivity = beer_data.groupby('brand').agg({\n    'price_per_floz': 'mean', \n    'quantity': 'sum'\n}).reset_index()\n\n# Sort by price per fluid ounce\nbrand_price_sensitivity_sorted = brand_price_sensitivity.sort_values('price_per_floz', ascending=True)\n\n# Plotting average price per fluid ounce for each brand and the total quantity purchased\nfig, ax1 = plt.subplots(figsize=(12, 10))\n\ncolor = 'tab:red'\nax1.set_xlabel('Brand')\nax1.set_ylabel('Average Price per Fluid Ounce', color=color)\nax1.bar(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['price_per_floz'], color=color)\nax1.tick_params(axis='y', labelcolor=color)\nax1.set_xticklabels(brand_price_sensitivity_sorted['brand'], rotation=90)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\ncolor = 'tab:blue'\nax2.set_ylabel('Total Quantity Purchased', color=color)  # we already handled the x-label with ax1\nax2.plot(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['quantity'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.title('Average Price per Fluid Ounce & Total Quantity Purchased by Brand')\nplt.show()\n\n\n\n\nIn the visualization, we have a bar graph showing the average price per fluid ounce for each brand (in red) and a line graph showing the total quantity purchased for each brand (in blue). This gives us a sense of whether there’s a relationship between the price and the quantity purchased. The x-axis labels are quite compressed due to the number of brands, but we can still observe trends such as whether lower-priced beers tend to be purchased in larger quantities.\nLastly, let’s move to the fourth analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#promotional-impact",
    "href": "posts/beer-markets/beer-markets.html#promotional-impact",
    "title": "Beer Markets",
    "section": "Promotional Impact",
    "text": "Promotional Impact\nWe’ll assess the impact of promotions on the quantity of beer purchased. For this analysis, we can calculate the average quantity purchased with and without promotions and visualize the difference. We’ll do this for each brand to see which brands are most affected by promotions.\nLet’s begin this analysis by looking at the average quantity purchased with and without promotions for each brand.\n\n# Calculate average quantity purchased with and without promotions for each brand\npromo_impact = beer_data.groupby(['brand', 'promo']).agg({'quantity':'mean'}).reset_index()\n\n# Pivot the data to have promo and non-promo side by side for each brand\npromo_impact_pivot = promo_impact.pivot(index='brand', columns='promo', values='quantity').reset_index()\npromo_impact_pivot.columns = ['brand', 'non_promo', 'promo']\n\n# Calculate the difference in average quantity purchased between promo and non-promo\npromo_impact_pivot['promo_impact'] = promo_impact_pivot['promo'] - promo_impact_pivot['non_promo']\n\n# Sort by the impact of promo\npromo_impact_pivot_sorted = promo_impact_pivot.sort_values('promo_impact', ascending=False)\n\n# Plotting the difference in average quantity purchased between promo and non-promo for each brand\nplt.figure(figsize=(12, 10))\nsns.barplot(x='promo_impact', y='brand', data=promo_impact_pivot_sorted, palette='viridis')\nplt.title('Impact of Promotions on Average Quantity Purchased by Brand')\nplt.xlabel('Difference in Average Quantity Purchased (Promo - Non-Promo)')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar chart illustrates the impact of promotions on the average quantity of beer purchased by brand. A positive value indicates that, on average, more beer is purchased when there is a promotion compared to when there isn’t. Some brands appear to be significantly more influenced by promotions, with customers buying more when the products are on sale or promotion.\nThis comprehensive analysis has provided insights into purchase patterns, demographic preferences, price sensitivity, and the impact of promotions on beer purchases."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Starwars",
    "section": "",
    "text": "Let’s analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Starwars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Starwars",
    "section": "Human vs. Droid",
    "text": "Human vs. Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in Jaxson Marsh’s Quarto blog. Welcome!\nIn this web-section you can find intersting blogs on:\n\nSpotify\nNFL in 2022\nNYC Restaurant Inspection\nBeer Markets"
  },
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL Project",
    "section": "",
    "text": "The following dataframe was used for this project 😴\n\nsleephealth &lt;- read.csv(\"C:/Users/Jaxso/Downloads/Sleep_health_and_lifestyle_dataset.csv\")"
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL Project",
    "section": "2.1 Summary Statistics",
    "text": "2.1 Summary Statistics\n\nmpg &lt;- ggplot2::mpg\n\n\n\n\n  \n\n\n\nskim(sleephealth) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nsleephealth\n\n\nNumber of rows\n374\n\n\nNumber of columns\n13\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n1\n4\n6\n0\n2\n0\n\n\nOccupation\n1\n5\n20\n0\n11\n0\n\n\nBMI.Category\n1\n5\n13\n0\n4\n0\n\n\nBlood.Pressure\n1\n6\n6\n0\n25\n0\n\n\nSleep.Disorder\n1\n4\n11\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nPerson.ID\n1\n187.50\n108.11\n1.0\n94.25\n187.5\n280.75\n374.0\n▇▇▇▇▇\n\n\nAge\n1\n42.18\n8.67\n27.0\n35.25\n43.0\n50.00\n59.0\n▆▆▇▃▅\n\n\nSleep.Duration\n1\n7.13\n0.80\n5.8\n6.40\n7.2\n7.80\n8.5\n▇▆▇▇▆\n\n\nQuality.of.Sleep\n1\n7.31\n1.20\n4.0\n6.00\n7.0\n8.00\n9.0\n▁▇▆▇▅\n\n\nPhysical.Activity.Level\n1\n59.17\n20.83\n30.0\n45.00\n60.0\n75.00\n90.0\n▇▇▇▇▇\n\n\nStress.Level\n1\n5.39\n1.77\n3.0\n4.00\n5.0\n7.00\n8.0\n▇▃▂▃▃\n\n\nHeart.Rate\n1\n70.17\n4.14\n65.0\n68.00\n70.0\n72.00\n86.0\n▇▇▂▁▁\n\n\nDaily.Steps\n1\n6816.84\n1617.92\n3000.0\n5600.00\n7000.0\n8000.00\n10000.0\n▁▅▇▆▂"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL Project",
    "section": "2.2 MPG and a Type of Cars",
    "text": "2.2 MPG and a Type of Cars\nThe following boxplot shows how the distribution of Quality of Sleep (Quality.of.Sleep) varies by a Stress Level (Stress.Level) 😴 🛏️ 😠."
  },
  {
    "objectID": "quarto-template.html",
    "href": "quarto-template.html",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "",
    "text": "oj &lt;- read_csv('https://bcdanl.github.io/data/dominick_oj.csv')\nnvars &lt;- format(round(ncol(oj), 0), \n                nsmall=0, \n                big.mark=\",\") \nnobs &lt;- format(round(nrow(oj), 0), \n                nsmall=0, \n                big.mark=\",\")\nThe number of variables is 4; the number of observations is 28,947.\nRoses are red\nviolets are blue."
  },
  {
    "objectID": "quarto-template.html#data-summary",
    "href": "quarto-template.html#data-summary",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.1 Data Summary",
    "text": "2.1 Data Summary\n\nSummary statistics (Use skimr::skim())"
  },
  {
    "objectID": "quarto-template.html#data-visualization",
    "href": "quarto-template.html#data-visualization",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.2 Data Visualization",
    "text": "2.2 Data Visualization\n\noj %&gt;% \n  ggplot(aes(x = log(sales), \n             y = log(price),\n             color = brand)) +\n  geom_point(alpha = .1) +\n  geom_smooth(method = lm, se = F) +\n  facet_wrap(.~ad) +\n  theme_bw() +\n  theme(legend.position = 'top')"
  },
  {
    "objectID": "quarto-template.html#data-transformation",
    "href": "quarto-template.html#data-transformation",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.3 Data Transformation",
    "text": "2.3 Data Transformation\n\nob_sum1 &lt;- oj %&gt;% \n  group_by(brand, ad) %&gt;% \n  summarise(sales_tot = sum(sales, na.rm = T),\n            price_mean = round(mean(price, na.rm = T), 2))"
  },
  {
    "objectID": "quarto-template.html#analysis",
    "href": "quarto-template.html#analysis",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.4 Analysis",
    "text": "2.4 Analysis"
  },
  {
    "objectID": "quarto-template.html#quotes",
    "href": "quarto-template.html#quotes",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.5 Quotes",
    "text": "2.5 Quotes\n\nQuote with &gt;\n\n\n“The truth is rarely pure and never simple.”\n— Oscar Wilde"
  },
  {
    "objectID": "quarto-template.html#inserting-figures",
    "href": "quarto-template.html#inserting-figures",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.6 Inserting Figures",
    "text": "2.6 Inserting Figures\nFor a demonstration of a DANL tiger, see Figure 1.\n\n\n\n\n\nFigure 1: DANL Tiger"
  },
  {
    "objectID": "quarto-template.html#inserting-a-html-page",
    "href": "quarto-template.html#inserting-a-html-page",
    "title": "DANL 200: Introduction to Data AnalyticsProject",
    "section": "2.7 Inserting a HTML page",
    "text": "2.7 Inserting a HTML page"
  },
  {
    "objectID": "Classwork 10.html",
    "href": "Classwork 10.html",
    "title": "Classwork 10",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(skimr)\n\nQuestion 1 - Billboard Charts\nThe following data is for Question 1:"
  },
  {
    "objectID": "classwork-10.html",
    "href": "classwork-10.html",
    "title": "Classwork 10",
    "section": "",
    "text": "1 Billboard Charts\nThe following data is for Question 1:\n\nbillboard &lt;- read_csv('https://bcdanl.github.io/data/billboard.csv')\n\n\n\n\n  \n\n\n\n1.0.1 .\nDescribe how the distribution of rating varies across week 1, week 2, and week 3 using the faceted histogram.\n\ninstall.packages(\"ggplot2\")\nlibrary(ggplot2)\n\nggplot(billboard, aes(x = wk1)) +\n  geom_histogram(binwidth = 1, fill = \"blue\", color = \"black\", alpha = 0.7) +\n  facet_wrap(~year, scales = \"free_x\", ncol = 3) +\n  labs(title = \"Distribution of Ratings Across Weeks 1, 2, and 3\",\n       x = \"Rating\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n1.0.2 .\n\nWhich artist(s) have the most number of tracks in billboard data.frame?\nDo not double-count an artist’s tracks if they appear in multiple weeks.\n\n\nartist_track_counts &lt;- billboard %&gt;%\n  group_by(artist) %&gt;%\n  summarise(unique_tracks = n_distinct(track))\n\ntop_artists &lt;- artist_track_counts %&gt;%\n  filter(unique_tracks == max(unique_tracks))\n\n\n\n\n2 Average Personal Income in NY Counties\nThe following data is for Question 2:\n\nny_pincp &lt;- read_csv('https://bcdanl.github.io/data/NY_pinc_wide.csv')\n\n\n\n\n  \n\n\n\n2.0.1 .\nMake ny_pincp longer.\n\nq2a &lt;- ny_pincp %&gt;% \n  pivot_longer(cols = pincp1969:pincp2019,\n               names_to = \"year\",\n               values_to = \"pincp\")\n\n\n\n2.0.2 .\nProvide both (1) ggplot code and (2) a simple comment to describe how overall the yearly trend of NY counties’ average personal incomes are.\n\nggplot(q2a, aes(x = year, y = pincp, group = fips, color = geoname)) +\n  geom_line() +\n  labs(title = \"Yearly Trend of NY Counties' Average Personal Incomes\",\n       x = \"Year\",\n       y = \"Average Personal Income\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  theme(axis.text.x = element_text(\n  angle = -45,\n  hjust = 0,\n  vjust = 1\n))\n\n\n\n\nThis ggplot code creates a line plot to visualize the yearly trend of New York counties’ average personal incomes. Each line corresponds to a county, differentiated by color, and the x-axis represents the years. The ‘pincp’ variable is used for the y-axis, and ‘geoname’ is used to label the lines with county names. The ‘fips’ variable is used to group the data by county.\n\n\n\n3 COVID-19 Cases\nThe following data is for Question 3:\n\ncovid &lt;- read_csv('https://bcdanl.github.io/data/covid19_cases.csv')\n\n\n3.0.1 .\n-Keep only the following three variables, ‘date’, ‘countriesAndTerritories’, and ‘cases’.\n-Then make a wide-form data.frame of covid whose variable names are from countriesAndTerritories and values are from cases.\n-Then drop the variable date.\n\nlibrary(dplyr)\nlibrary(tidyr)\n\ncovid_subset &lt;- covid %&gt;%\n  select(date, countriesAndTerritories, cases)\n\ncovid_wide &lt;- covid_subset %&gt;%\n  pivot_wider(names_from = countriesAndTerritories, values_from = cases)\n\ncovid_final &lt;- covid_wide %&gt;%\n  select(-date)"
  },
  {
    "objectID": "classwork-10.html#q1a",
    "href": "classwork-10.html#q1a",
    "title": "Classwork 10",
    "section": "Q1a",
    "text": "Q1a\nDescribe how the distribution of rating varies across week 1, week 2, and week 3 using the faceted histogram."
  },
  {
    "objectID": "classwork-10.html#q1b",
    "href": "classwork-10.html#q1b",
    "title": "Classwork 10",
    "section": "Q1b",
    "text": "Q1b\n\nWhich artist(s) have the most number of tracks in billboard data.frame?\nDo not double-count an artist’s tracks if they appear in multiple weeks.\n\n\nartist_track_counts &lt;- billboard %&gt;%\n  group_by(artist) %&gt;%\n  summarise(unique_tracks = n_distinct(track))\n\ntop_artists &lt;- artist_track_counts %&gt;%\n  filter(unique_tracks == max(unique_tracks))\n\n\nQuestion 2 - Average Personal Income in NY Counties\nThe following data is for Question 2:\n\nny_pincp &lt;- read_csv('https://bcdanl.github.io/data/NY_pinc_wide.csv')\n\nRows: 63 Columns: 53\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): geoname\ndbl (52): fips, pincp1969, pincp1970, pincp1971, pincp1972, pincp1973, pincp...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "classwork-10.html#q2a",
    "href": "classwork-10.html#q2a",
    "title": "Classwork 10",
    "section": "Q2a",
    "text": "Q2a\nMake ny_pincp longer.\n\nq2a &lt;- ny_pincp %&gt;% \n  pivot_longer(cols = pincp1969:pincp2019,\n               names_to = \"year\",\n               values_to = \"pincp\")"
  },
  {
    "objectID": "classwork-10.html#q2b",
    "href": "classwork-10.html#q2b",
    "title": "Classwork 10",
    "section": "Q2b",
    "text": "Q2b"
  },
  {
    "objectID": "danl200-hw5-Marsh-Jaxson.html",
    "href": "danl200-hw5-Marsh-Jaxson.html",
    "title": "danl200-hw5-Marsh-Jaxson.qmd",
    "section": "",
    "text": "Q1a\n\n\nProvide a link for your GihtHub repository:\nhttps://github.com/Jaxsonmarsh/Jaxsonmarsh.github.io\n#Q2 # The following is the data.frame for Question 2.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nNFL2022_stuffs &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_stuffs.csv')\n\nRows: 50147 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): game_id, posteam\ndbl (8): play_id, drive, week, qtr, down, half_seconds_remaining, pass, wp\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n#Q2a # In data.frame, NFL2022_stuffs, remove observations for which values of posteam is missing.\n\nNFL2022_stuffs &lt;- subset(NFL2022_stuffs, !is.na(posteam))\n\n#Q2b #Summarize the mean value of pass for each posteam when all the following conditions hold: # -wp is greater than 20% and less than 75%; # -down is less than or equal to 2; and # -half_seconds_remaining is greater than 120.\n\nlibrary(dplyr)\nfiltered_data &lt;- NFL2022_stuffs %&gt;%\n  filter(wp &gt; 0.2 & wp &lt; 0.75, down &lt;= 2, half_seconds_remaining &gt; 120)\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(posteam) %&gt;%\n  summarize(mean_pass = mean(pass, na.rm = TRUE))\n\n#Q2c #Provide both (1) a ggplot code with geom_point() using the resulting data.frame in Q2b and (2) a simple comment to describe the mean value of pass for each posteam. # -In the ggplot, reorder the posteam categories based on the mean value of pass in ascending or in descending order.\n\nsummary_data &lt;- summary_data %&gt;%\n  arrange(mean_pass)\n\nlibrary(ggplot2)\n\nggplot(summary_data, aes(x = reorder(posteam, mean_pass), y = mean_pass)) +\n  geom_point() +\n  labs(title = \"Mean Value of pass for Each posteam\",\n       x = \"Percentage of pass plays\",\n       y = \"Team with posession\") +\n  theme_minimal()\n\n\n\n\nThis scatterplot shows that the mean value of pass for each posteam becomes greater, when the team with posession increases their percentage of passing plays.\n#Q2d #Consider the following data.frame, NFL2022_epa:\n\nNFL2022_epa &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_epa.csv')\n\nRows: 46427 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): game_id, posteam, receiver, passer\ndbl (3): play_id, drive, epa\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n#Create the data.frame, NFL2022_stuffs_EPA, that includes: # -All the variables in the data.frame, NFL2022_stuffs; # -The variables, passer, receiver, and epa, from the data.frame, NFL2022_epa. by joining the two data.frames. # -In the resulting data.frame, NFL2022_stuffs_EPA, remove observations with NA in passer.\n\nlibrary(dplyr)\n\nNFL2022_stuffs_EPA &lt;- merge(NFL2022_stuffs, NFL2022_epa[, c(\"game_id\", \"passer\", \"receiver\", \"epa\")], by = \"game_id\", all.x = TRUE)\n\n\nNFL2022_stuffs_EPA &lt;- na.omit(NFL2022_stuffs_EPA)\n\n#Q2e #Provide both (1) a single ggplot and (2) a simple comment to describe the NFL weekly trend of weekly mean value of epa for each of the following two passers, # -“J.Allen” # -“P.Mahomes”\n\nlibrary(ggplot2)\n\nfiltered_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  filter(passer %in% c(\"J.Allen\", \"P.Mahomes\"))\n\nggplot(filtered_data, aes(x = week, y = epa, color = passer, group = passer)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Weekly Trend of Mean EPA for J.Allen and P.Mahomes\",\n       x = \"Week\",\n       y = \"Mean EPA\") +\n  theme_minimal()\n\n\n\n\nThe weekly trend plot illustrates the mean EPA values for passes made by quarterbacks J.Allen and P.Mahomes throughout the NFL 2022 season. We can observe that both quaterbacks follow a similar pattern, with Josh Allen hitting lower lows, and Patrick Mahomes reaching a much higher EPA in the end.\n#Q2f #Calculate the difference between the mean value of epa for “J.Allen” the mean value of epa for “P.Mahomes” for each value of week.\n\nmean_epa &lt;- filtered_data %&gt;%\n  group_by(week, passer) %&gt;%\n  summarise(mean_epa = mean(epa, na.rm = TRUE))\n\n`summarise()` has grouped output by 'week'. You can override using the\n`.groups` argument.\n\nmean_epa_wide &lt;- pivot_wider(mean_epa, names_from = passer, values_from = mean_epa)\n\nmean_epa_wide &lt;- mean_epa_wide %&gt;%\n  mutate(diff_epa = J.Allen - P.Mahomes)\n\n#Q2g #Summarize the resulting data.frame in Q2d, with the following four variables: # -posteam: String abbreviation for the team with possession. # -passer: Name of the player who passed a ball to a receiver by initially taking a three-step drop, and backpedaling into the pocket to make a pass. (Mostly, they are quarterbacks.) # -mean_epa: Mean value of epa in 2022 for each passer # -n_pass: Number of observations for each passer\n\nsummary_data &lt;- NFL2022_stuffs_EPA %&gt;%\n  group_by(posteam, passer) %&gt;%\n  summarise(mean_epa = mean(epa, na.rm = TRUE),\n            n_pass = n())\n\n`summarise()` has grouped output by 'posteam'. You can override using the\n`.groups` argument.\n\n\n#Then find the top 10 NFL passers in 2022 in terms of the mean value of epa, conditioning that n_pass must be greater than or equal to the third quantile level of n_pass.\n\npasser_summary &lt;- NFL2022_stuffs_EPA %&gt;%\n  group_by(passer) %&gt;%\n  summarise(mean_epa = mean(epa, na.rm = TRUE),\n            n_pass = n())\n\nquantile_threshold &lt;- quantile(passer_summary$n_pass, 0.75)\n\ntop_passers &lt;- passer_summary %&gt;%\n  filter(n_pass &gt;= quantile_threshold) %&gt;%\n  arrange(desc(mean_epa)) %&gt;%\n  head(10)"
  },
  {
    "objectID": "project.html#quality-of-sleep-under-stress",
    "href": "project.html#quality-of-sleep-under-stress",
    "title": "DANL Project",
    "section": "2.2 Quality of Sleep Under Stress",
    "text": "2.2 Quality of Sleep Under Stress\nThe following boxplot shows how the distribution of Quality of Sleep (Quality.of.Sleep) varies by a Stress Level (Stress.Level) 😴 🛏️ 😠."
  },
  {
    "objectID": "posts/NFL in 2022/NFL in 2022.html",
    "href": "posts/NFL in 2022/NFL in 2022.html",
    "title": "NFL in 2022",
    "section": "",
    "text": "Let’s analyze the NFL2022 data:\nNFL2022_stuffs &lt;- read_csv('https://bcdanl.github.io/data/NFL2022_stuffs.csv')"
  },
  {
    "objectID": "posts/NFL in 2022/NFL in 2022.html#variable-description-for-nfl2022_stuffs-data.frame",
    "href": "posts/NFL in 2022/NFL in 2022.html#variable-description-for-nfl2022_stuffs-data.frame",
    "title": "NFL in 2022",
    "section": "Variable Description for NFL2022_stuffs data.frame",
    "text": "Variable Description for NFL2022_stuffs data.frame\n-play_id: Numeric play identifier that when used with game_id and drive provides the unique identifier for a single play\n-game_id: Ten digit identifier for NFL game.\n-drive: Numeric drive number in the game.\n-week: Season week.\n-posteam: String abbreviation for the team with possession.\n-qtr: Quarter of the game (5 is overtime).\n-half_seconds_remaining: Numeric seconds remaining in the half.\n-down: The down for the given play. Basically you get four attempts (aka downs) to move the ball 10 yards (by either running with it or passing it). If you make 10 yards then you get another set of four downs.\n-pass: Binary indicator if the play was a pass play.\n-wp: Estimated winning probability for the posteam given the current situation at the start of the given play.\n🏈"
  },
  {
    "objectID": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html",
    "href": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html",
    "title": "NYC Restaurant Inspection",
    "section": "",
    "text": "Let’s analyze the nycinspect data:\nnycinspect &lt;- read_csv('https://bcdanl.github.io/data/DOHMH_NYC_Restaurant_Inspection.csv')\n🍔 🍕"
  },
  {
    "objectID": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#variables-for-nycinspect-data.frame",
    "href": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#variables-for-nycinspect-data.frame",
    "title": "NYC Restaurant Inspection",
    "section": "Variables for nycinspect data.frame",
    "text": "Variables for nycinspect data.frame\nThe following are the variables present in the nycinspect data.frame.\n-‘CAMIS’ -‘DBA’ -‘BORO’ -‘STREET’ -‘CUISINE DESCRIPTION’ -‘INSPECTION DATE’ -‘ACTION’ -‘VIOLATION CODE’ -‘VIOLATION DESCRIPTION’ -‘CRITICAL FLAG’ -‘SCORE’ -‘GRADE’"
  },
  {
    "objectID": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#figure-1",
    "href": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#figure-1",
    "title": "NYC Restaurant Inspection",
    "section": "Figure 1",
    "text": "Figure 1\nProvide both (1) ggplot code and (2) a simple comment to describe how ‘ACTION’ varies by ‘SCORE’ and ‘GRADE’.\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\nggplot(nycinspect, aes(x = SCORE, fill = ACTION)) +\n  geom_bar(position = 'stack') +\n  facet_wrap(~ GRADE, scales = 'free') +\n  labs(title = \"ACTION Variation by SCORE and GRADE\",\n       x = \"SCORE\",\n       y = \"Count\",\n       fill = \"ACTION\") +\n  theme_minimal()\n\n\n\n\nThis ggplot code generates a bar plot to visualize how the distribution of ‘ACTION’ varies with ‘SCORE’ across different ‘Grade’ categories. Each facet represents a different ‘Grade’, allowing us to observe patterns in ‘ACTION’ based on the inspection scores (‘SCORE’) and corresponding grades."
  },
  {
    "objectID": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#figure-2",
    "href": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#figure-2",
    "title": "NYC Restaurant Inspection",
    "section": "Figure 2",
    "text": "Figure 2\nCreate both (1) a scatter plot to visualize the relationship between the ‘BORO and the ’SCORE’(2) a simple comment based on the findings.\n\nggplot(nycinspect, aes(x = BORO, y = SCORE)) +\n  geom_point() +\n  labs(title = \"Scatter Plot of Score by Boro\",\n       x = \"Boro\",\n       y = \"Score\") +\n  theme_minimal()\n\n\n\n\nThe scatterplot presented above shows us the relationship between each specific NYC ‘BORO’ and the specific ‘SCORE’ that each one recieved. Some important findings are that the ‘BORO’ of Manhattan recieved some of the max scores, whilst Staten Island recieved lower scores in comarison to others."
  },
  {
    "objectID": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#figure-3",
    "href": "posts/NYC_Restaurant_Inspection/NYC_Restaurant_Inspection.html#figure-3",
    "title": "NYC Restaurant Inspection",
    "section": "Figure 3",
    "text": "Figure 3\nProvide both (1) a bar chart and (2) a simple comment based on the relationship between the day of the week and the average inspection ‘SCORE’. 📅\n\nnycinspect &lt;- data.frame(\n  SCORE = rnorm(500, mean = 80, sd = 10),\n  DAY_OF_WEEK = sample(c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"), 500, replace = TRUE)\n)\n\nggplot(nycinspect, aes(x = DAY_OF_WEEK, y = SCORE, fill = DAY_OF_WEEK)) +\n  geom_bar(stat = \"summary\", fun = \"mean\", position = \"dodge\") +\n  labs(title = \"Average Inspection Score by Day of the Week\",\n       x = \"Day of the Week\",\n       y = \"Average Score\",\n       fill = \"Day of the Week\") +\n  theme_minimal()\n\n\n\n\nThis bar plot visualizes the average inspection scores for each day of the week. Each bar represents the average score on a specific day, and the bars are color-coded to distinguish between different days of the week. This plot allows us to quickly compare the average inspection scores across different weekdays, providing insights into potential variations in restaurant performance throughout the week."
  },
  {
    "objectID": "posts/Spotify/Spotify.html",
    "href": "posts/Spotify/Spotify.html",
    "title": "Spotify",
    "section": "",
    "text": "Let’s analyze the spotify data:\nspotify &lt;- read_csv('https://bcdanl.github.io/data/spotify_all.csv')\n🎹"
  },
  {
    "objectID": "posts/Spotify/Spotify.html#variables-for-nycinspect-data.frame",
    "href": "posts/Spotify/Spotify.html#variables-for-nycinspect-data.frame",
    "title": "Spotify",
    "section": "Variables for nycinspect data.frame",
    "text": "Variables for nycinspect data.frame\nThe following are the variables present in the nycinspect data.frame.\n-‘CAMIS’ -‘DBA’ -‘BORO’ -‘STREET’ -‘CUISINE DESCRIPTION’ -‘INSPECTION DATE’ -‘ACTION’ -‘VIOLATION CODE’ -‘VIOLATION DESCRIPTION’ -‘CRITICAL FLAG’ -‘SCORE’ -‘GRADE’"
  },
  {
    "objectID": "posts/Spotify/Spotify.html#figure-1",
    "href": "posts/Spotify/Spotify.html#figure-1",
    "title": "Spotify",
    "section": "Figure 1",
    "text": "Figure 1\nProvide a ggplot barchart of the top 10 spotify artists.\n\ntop_artists &lt;- spotify %&gt;% \n  group_by(artist_name) %&gt;%\n  summarise(total_playlists = n_distinct(pid)) %&gt;%\n  top_n(10, total_playlists)\n\nggplot(top_artists, aes(x = reorder(artist_name, -total_playlists), y = total_playlists)) +\n  geom_bar(stat = \"identity\", fill = \"coral\") +\n  labs(title = \"Top 10 Artists in Playlists\",\n       x = \"Artist Name\",\n       y = \"Number of Playlists\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))"
  },
  {
    "objectID": "posts/Spotify/Spotify.html#figure-2",
    "href": "posts/Spotify/Spotify.html#figure-2",
    "title": "Spotify",
    "section": "Figure 2",
    "text": "Figure 2\nCreate both (1) a ggplot and (2) a simple comment to describe the distribution of ‘pos’ in playlists 🎸\n\nlibrary(ggplot2)\n\nggplot(spotify, aes(x = pos)) +\n  geom_histogram(binwidth = 1, fill = \"skyblue\", color = \"black\") +\n  labs(title = \"Distribution of Position in Playlists\",\n       x = \"Position\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\nThe above figure shows us that the ones postion increases with a decrease in frequency, and vice versa, on spotify."
  },
  {
    "objectID": "posts/Spotify/Spotify.html#figure-3",
    "href": "posts/Spotify/Spotify.html#figure-3",
    "title": "Spotify",
    "section": "Figure 3",
    "text": "Figure 3\nProvide both (1) a scatter plot (2) that shows the relationship between the ‘pos’ and the ‘duration_ms’ of the track 🎧\n\nlibrary(ggplot2)\n\nset.seed(123)\nrandom_subset &lt;- spotify[sample(nrow(spotify), 500), ]\n\nggplot(random_subset, aes(x = pos, y = duration_ms)) +\n  geom_point(color = \"orange\", alpha = 0.7) +\n  labs(title = \"Scatter Plot of Position vs. Track Duration\",\n       x = \"Position in Playlist\",\n       y = \"Duration (ms)\") +\n  theme_minimal()\n\n\n\n\nIn this example, I created a ggplot function to create a scatter plot, mapping the x-axis to the position in the playlist (pos) and the y-axis to the duration of the track (duration_ms). By using a random subset of 500 points for better visualization, it was found that most songs fall along a similar duration regardless of their position in the playlist."
  },
  {
    "objectID": "posts/Beer Markets/beer-markets.html",
    "href": "posts/Beer Markets/beer-markets.html",
    "title": "Beer Markets",
    "section": "",
    "text": "Let’s analyze the beer_markets data:\nbeer_markets &lt;- read_csv('https://bcdanl.github.io/data/beer_markets.csv')"
  },
  {
    "objectID": "posts/Beer Markets/beer-markets.html#variables-for-nycinspect-data.frame",
    "href": "posts/Beer Markets/beer-markets.html#variables-for-nycinspect-data.frame",
    "title": "Beer Markets",
    "section": "Variables for nycinspect data.frame",
    "text": "Variables for nycinspect data.frame\nThe following are the variables present in the nycinspect data.frame.\n-‘CAMIS’ -‘DBA’ -‘BORO’ -‘STREET’ -‘CUISINE DESCRIPTION’ -‘INSPECTION DATE’ -‘ACTION’ -‘VIOLATION CODE’ -‘VIOLATION DESCRIPTION’ -‘CRITICAL FLAG’ -‘SCORE’ -‘GRADE’"
  },
  {
    "objectID": "posts/Beer Markets/beer-markets.html#figure-1",
    "href": "posts/Beer Markets/beer-markets.html#figure-1",
    "title": "Beer Markets",
    "section": "Figure 1",
    "text": "Figure 1\nProvide both (1) ggplot code and (2) a simple comment to describe how ‘dollar_spent’ varies by ‘income’ and ‘employment’.\n\nlibrary(ggplot2)\n\nggplot(beer_markets, aes(x = income, y = dollar_spent, fill = employment)) +\n  geom_boxplot() +\n  labs(title = \"Variation of 'dollar_spent' by 'income' and 'employment'\",\n       x = \"Income\",\n       y = \"Dollar Spent\") +\n  facet_wrap(~ employment, scales = \"free_y\", ncol = 2) +\n  theme_minimal()\n\n\n\n\nThe boxplot shows how ‘dollar_spent’ varies by ‘income’ and ‘employment’ in the beer markets dataset. Some significant findings is the part-time workers who have an income of 200k+ are prone to spend the most ammount of money on beer. In addition I thought it was interesting the people with no employment spend almost as much money on beer as people with full time jobs."
  },
  {
    "objectID": "posts/Beer Markets/beer-markets.html#figure-2",
    "href": "posts/Beer Markets/beer-markets.html#figure-2",
    "title": "Beer Markets",
    "section": "Figure 2",
    "text": "Figure 2\nProvide both (1) ggplot code and (2) a simple comment to describe how ‘brand’ varies by ‘buyertype’\n\nggplot(beer_markets, aes(x = buyertype, fill = brand)) +\n  geom_bar(position = \"dodge\", stat = \"count\") +\n  labs(title = \"Variation of 'brand' by 'buyertype'\",\n       x = \"Buyer Type\",\n       y = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nThe bar plot illustrates the distribution of ‘brand’ across different ‘buyertype’ categories in the beer markets dataset. Some interesting findings that I wanted to mention were that Bud Light was the most bought type of beer amongt all the buyer types, whilst Bush Light was the least bought."
  },
  {
    "objectID": "posts/Beer Markets/beer-markets.html#figure-3",
    "href": "posts/Beer Markets/beer-markets.html#figure-3",
    "title": "Beer Markets",
    "section": "Figure 3",
    "text": "Figure 3\nProvide both (1) ggplot code and (2) a simple comment to describe how ‘brand’ varies by ‘container’\n\nggplot(beer_markets, aes(x = brand, fill = container)) +\n  geom_bar(stat = \"count\", position = \"dodge\") +\n  labs(title = \"Variation of 'brand' by 'container'\",\n       x = \"Brand\",\n       y = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nThe bar plot displays how ‘brand’ varies based on the ‘container’ type in the beer markets dataset. Some analysis of the chart shows us that most beer brands manufacture using cans as their predominant container of choice, while a non refillable bottle is a decent secondary option."
  },
  {
    "objectID": "posts/Beer Markets/beer-markets.html#variables-for-beer_markets-data.frame",
    "href": "posts/Beer Markets/beer-markets.html#variables-for-beer_markets-data.frame",
    "title": "Beer Markets",
    "section": "Variables for beer_markets data.frame",
    "text": "Variables for beer_markets data.frame\nThe following are the variables present in the beer_markets data.frame.\n-‘hh’ -’_purchase_desc’ -‘quantity’ -‘brand’ -‘dollar_spent’ -‘beer_floz’ -‘price_per_floz’ -‘container’ -‘promo’ -‘market’ -‘buyertype’ -‘income’ -‘childrenUnder6’ -‘children6to17’ -‘age’ -‘employment -’degree’ -‘cow’ -‘race’ -‘microwave’ -‘dishwasher’ -‘tvcable’ -‘singlefamilyhome’ -‘npeople’"
  },
  {
    "objectID": "posts/Spotify/Spotify.html#variables-for-spotify-data.frame",
    "href": "posts/Spotify/Spotify.html#variables-for-spotify-data.frame",
    "title": "Spotify",
    "section": "Variables for spotify data.frame",
    "text": "Variables for spotify data.frame\nThe following are the variables present in the spotify data.frame.\n-‘pid’ -‘playlist_name’ -‘pos’ -‘artist_name’ -‘track_name’ -‘duration_ms’ -‘album_name’"
  },
  {
    "objectID": "project.html#sleep-duration-by-ocupation",
    "href": "project.html#sleep-duration-by-ocupation",
    "title": "DANL Project",
    "section": "2.2 Sleep Duration by Ocupation",
    "text": "2.2 Sleep Duration by Ocupation\nThe following boxplot shows how the mean sleep duration (Sleep.Duration) varies by occupation (Occupation) 😴 🛏️ .\n\nmean_sleep_job &lt;- sleephealth %&gt;%\n  group_by(Occupation) %&gt;%\n  summarize(\n    n = n(),\n    sleep_mean = mean(Sleep.Duration, na.rm = TRUE)\n  ) %&gt;%\n  arrange(desc(n))\nmean_sleep_job\n\n# A tibble: 11 × 3\n   Occupation               n sleep_mean\n   &lt;chr&gt;                &lt;int&gt;      &lt;dbl&gt;\n 1 Nurse                   73       7.06\n 2 Doctor                  71       6.97\n 3 Engineer                63       7.99\n 4 Lawyer                  47       7.41\n 5 Teacher                 40       6.69\n 6 Accountant              37       7.11\n 7 Salesperson             32       6.40\n 8 Scientist                4       6   \n 9 Software Engineer        4       6.75\n10 Sales Representative     2       5.9 \n11 Manager                  1       6.9 \n\nggplot( data = mean_sleep_job, mapping = aes(x = Occupation, y = sleep_mean)) + \n          geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_text(\n  angle = -45,\n  hjust = 0,\n  vjust = 1\n))\n\n\n\n\nThe bar graph represents the mean sleep duration amongst all the presented occupations in the ‘sleephealth’ dataset. After putting the data into a ggplot figure, it was found that engineer’s, on average, have the highest mean sleep duration at about 8 hours per night, and sales representative’s had the lowest mean sleep duration at just under 6 hours a night."
  },
  {
    "objectID": "project.html#effect-of-physical-activity-and-sleep-duration-on-stress",
    "href": "project.html#effect-of-physical-activity-and-sleep-duration-on-stress",
    "title": "DANL Project",
    "section": "2.3 Effect of Physical Activity and Sleep Duration on Stress",
    "text": "2.3 Effect of Physical Activity and Sleep Duration on Stress\nThis ggplot shows the effect of someone’s sleep duration (‘Sleep.Duration’) and level of physical activity (‘Physical.Activity.Level’) on their stress levels (‘Stress.Level’) 😠 😄 .\n\nggplot(sleephealth, aes(x = Sleep.Duration, y = Physical.Activity.Level, color = Stress.Level)) +\n  geom_point() +\n  labs(title = \"Effect of Physical Activity and Sleep Duration on Stress\",\n       x = \"Sleep Duration\",\n       y = \"Physical Activity Level\",\n       color = \"Stress Level\") +\n  theme(plot.title = element_text(size = 10))\n\n\n\n\nThe above scatter plot visualizes the relationship between sleep duration and physical activity level in the ‘sleephealth’ dataset, with stress levels represented by color. Some interesting findings that were found was that a higher sleep duration and level of physical activity resulted in lower overall stress levels, while higher stress levels were a result of the inverse."
  },
  {
    "objectID": "project.html#sleep-duration-and-quality-of-sleep-among-varying-sleep-disorders",
    "href": "project.html#sleep-duration-and-quality-of-sleep-among-varying-sleep-disorders",
    "title": "DANL Project",
    "section": "2.4 Sleep Duration and Quality of Sleep Among Varying Sleep Disorders",
    "text": "2.4 Sleep Duration and Quality of Sleep Among Varying Sleep Disorders\nThis ggplot shows the effect of different sleep disorders (‘Sleep.Disorder’) on the subjects’ quality of sleep (‘Quality.of.Sleep’) and overall sleep duration (‘Sleep.Duration’).\n\nggplot(sleephealth, aes(x = Sleep.Duration, y = Quality.of.Sleep, color = Quality.of.Sleep)) +\n  geom_point() +\n  facet_wrap(~ Sleep.Disorder) +\n  labs(title = \"Scatter Plot of Sleep Duration vs Quality of Sleep\",\n       x = \"Sleep Duration\",\n       y = \"Quality of Sleep\",\n       color = \"Quality of Sleep\") +\n  scale_color_gradient(low = \"blue\", high = \"red\") +\n  theme(plot.title = element_text(size = 12))\n\n\n\n\nThe scatterplots shown above outlines the ‘Quality.of.Sleep’ and “Sleep.Duration’ by varying ‘Sleep.Disorder’s shown within the ’sleephealth’ dataset. After compliling the ggplot, it was intersting to find that the three scatterplots showed a similar pattern amongst their data points, and that people with no sleep disorder didnt have a quality of sleep below ~6, even if they slept for the minimum number of hours."
  },
  {
    "objectID": "project.html#section",
    "href": "project.html#section",
    "title": "DANL Project",
    "section": "2.5 ",
    "text": "2.5"
  },
  {
    "objectID": "project.html#effect-of-age-and-occupation-on-bmi",
    "href": "project.html#effect-of-age-and-occupation-on-bmi",
    "title": "DANL Project",
    "section": "2.5 Effect of Age and Occupation on BMI",
    "text": "2.5 Effect of Age and Occupation on BMI\nThe following ggplot represents how BMI (‘BMI.Category’) is different depending on each job (‘Occupation’) and varying ages (‘Age’).\n\nggplot(sleephealth, aes(x = BMI.Category, y = Age, fill = Occupation)) +\n  geom_tile(color = \"white\") +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(title = \"Heatmap of BMI Category by Age and Occupation\",\n       x = \"BMI Category\",\n       y = \"Age\",\n       fill = \"Occupation\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\nThe heatmap shown above represents two variables, ‘Occupation’ and ‘Age’, and their effect on ‘BMI.Category’ within the ‘sleephealth’ data frame. Some interesting things to note from the plot is that, most engineers of all ages were within a normal weight range, and that all the salespersons that were subjected to the data are between the ages of 40-45 years old and also overweight."
  }
]